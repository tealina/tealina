// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`make fastify post-get templates 1`] = `
[
  {
    "code": "export default makeTemplate(({ relative2api }) =>
  [
    \`import type { AuthedHandler } from '\${relative2api}/../types/handler.js'\`,
    \`import { convention } from '\${relative2api}/convention.js'\`,
    '',
    \`/** TODO: describe what it does */\`,
    \`const handler: AuthedHandler = async (req, res) => {\`,
     '  res.send()',
    '}',
    '',
    \`export default convention(handler)\`,
    '',
  ].join('\\\\n')
)",
    "filename": "genBasicCode.mjs",
  },
  {
    "code": "export default makeTemplate(({ Dir: Model, relative2api, dir: model }) => {
  const imps = [
    \`import type { AuthedHandler } from '\${relative2api}/../types/handler.js'\`,
    \`import type { Pure } from '\${relative2api}/../types/pure.js'\`,
    \`import { convention } from '\${relative2api}/convention.js'\`,
    \`import { db } from '\${relative2api}/db/prisma.js'\`,
  ]
  const codes = [
    \`type ApiType = AuthedHandler<{ body: Pure.\${Model}CreateInput }, Pure.\${Model}>\`,
    '',
    \`/** Create \${Model} */\`,
    \`const handler: ApiType = async (req, res) => {\`,
    \`  const result = await db.\${model}.create({\`,
    '    data: req.body,',
    '  })',
    '  res.send(result)',
    '}',
    '',
    \`export default convention(handler)\`,
    '',
  ]
  return [...imps, '', ...codes].join('\\\\n')
})",
    "filename": "genCreateCode.mjs",
  },
  {
    "code": "export default makeTemplate(({ Dir: Model, relative2api, dir: model }) => {
  const imps = [
    \`import type { AuthedHandler } from '\${relative2api}/../types/handler.js'\`,
    \`import type { Pure } from '\${relative2api}/../types/pure.js'\`,
    \`import type { FindManyArgs, PageResult } from '\${relative2api}/../types/common.js'\`,
    \`import { convention } from '\${relative2api}/convention.js'\`,
    \`import { db } from '\${relative2api}/db/prisma.js'\`,
  ]
  const codes = [
    \`type ApiType = AuthedHandler<{ body: FindManyArgs }, PageResult<Pure.\${Model}>>\`,
    '',
    \`/** Get page datas from \${Model} */\`,
    \`const handler: ApiType = async (req, res) => {\`,
    \`  const findManyArgs = req.body\`,
    '  const [total, datas] = await db.$transaction([',
    \`    db.\${model}.count({ where: findManyArgs.where }),\`,
    \`    db.\${model}.findMany(findManyArgs),\`,
    '  ])',
    '  res.send({ total, datas })',
    '}',
    '',
    \`export default convention(handler)\`,
    '',
  ]
  return [...imps, '', ...codes].join('\\\\n')
})",
    "filename": "genReadCode.mjs",
  },
  {
    "code": "export default makeTemplate(({ Dir: Model, relative2api, dir: model }) => {
  const imps = [
    \`import type { AuthedHandler } from '\${relative2api}/../types/handler.js'\`,
    \`import type { Pure } from '\${relative2api}/../types/pure.js'\`,
    \`import { convention } from '\${relative2api}/convention.js'\`,
    \`import { db } from '\${relative2api}/db/prisma.js'\`,
    \`import type { ModelId } from '\${relative2api}/../types/common.js'\`,
  ]
  const codes = [
    \`type ApiType = AuthedHandler<\`,
    \`  { body: ModelId & Pure.\${Model}UpdateInput },\`,
    \`  Pure.\${Model}\`,
    \`>\`,
    '',
    \`/** Update \${Model} by id */\`,
    \`const handler: ApiType = async (req, res) => {\`,
    '  const { id, ...data } = req.body',
    \`  const result = await db.\${model}.update({\`,
    '    where: { id },',
    '    data,',
    '  })',
    '  res.send(result)',
    '}',
    '',
    \`export default convention(handler)\`,
    '',
  ]
  return [...imps, '', ...codes].join('\\\\n')
})",
    "filename": "genUpdateCode.mjs",
  },
  {
    "code": "export default makeTemplate(({ relative2api, Dir: Model, dir: model }) => {
  const imps = [
    \`import type { AuthedHandler } from '\${relative2api}/../types/handler.js'\`,
    \`import type { ModelId } from '\${relative2api}/../types/common.js'\`,
    \`import { convention } from '\${relative2api}/convention.js'\`,
    \`import { db } from '\${relative2api}/db/prisma.js'\`,
  ]
  const codes = [
    \`type ApiType = AuthedHandler<\`,
    \`  { body: ModelId & Pure.\${Model}UpdateInput },\`,
    \`  Pure.\${Model}\`,
    \`>\`,
    '',
    \`/** Delete \${Model} by id */\`,
    \`const handler: ApiType = async (req, res) => {\`,
    '  const { id } = req.body',
    \`  await db.\${model}.delete({ where: { id } })\`,
    '  res.send()',
    '}',
    '',
    \`export default convention(handler)\`,
    '',
  ]
  return [...imps, '', ...codes].join('\\\\n')
})",
    "filename": "genDeleteCode.mjs",
  },
  {
    "code": "// @ts-check
import genCreateCode from './genCreateCode.mjs'
import genUpdateCode from './genUpdateCode.mjs'
import genDeleteCode from './genDeleteCode.mjs'
import genReadCode from './genReadCode.mjs'
import genBasicCode from './genBasicCode.mjs'
import { defineApiTemplates } from 'tealina'

export default defineApiTemplates([
  {
    alias: 'c',
    name: 'create',
    method: 'post',
    generateFn: genCreateCode,
  },
  {
    alias: 'r',
    name: 'getList',
    method: 'post',
    generateFn: genReadCode,
  },
  {
    alias: 'u',
    name: 'update',
    method: 'post',
    generateFn: genUpdateCode,
  },
  {
    alias: 'd',
    name: 'delete',
    method: 'post',
    generateFn: genDeleteCode,
  },
  {
    alias: '*', //fallback
    name: '',
    method: 'post',
    generateFn: genBasicCode,
  },
])",
    "filename": "index.mjs",
  },
]
`;
