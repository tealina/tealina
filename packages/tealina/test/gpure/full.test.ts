import {
  existsSync,
  mkdirSync,
  readFileSync,
  rmSync,
  writeFileSync,
} from 'node:fs'
import path from 'node:path'
import { afterAll, beforeAll, describe, expect, test } from 'vitest'
import {
  ENUMS_BEGIN,
  JSON_VALUE_TYPE,
  generatePureTypes,
} from '../../src/commands/gpure.js'
import { cli } from '../../src/commands/index.js'

describe('test gpure full work flow', () => {
  const tempDir = 'temp/gpure/full'
  const input = path.join(tempDir, 'schema.prisma')
  const output = path.join(tempDir, 'out.d.ts')
  beforeAll(() => {
    if (!existsSync(tempDir)) {
      mkdirSync(tempDir, { recursive: true })
    }
    writeFileSync(
      path.join(tempDir, 'schema.prisma'),
      getMockContent().join('\n'),
    )
  })
  afterAll(x => {
    if (x.tasks.every(v => v.result?.state == 'pass')) {
      rmSync(tempDir, { recursive: true })
    }
  })
  test('parse shema content', async () => {
    const args = cli.parse(
      ['', 'tealina', 'gpure', '-i', input, '-o', output],
      {
        run: false,
      },
    )
    console.log(args)
    const defaultValue = {
      input,
      output,
      namespace: 'Pure',
    }
    expect(args.options).contains(defaultValue)
    await generatePureTypes(defaultValue)
    const result = readFileSync(output).toString().split('\n')
    // console.log(result.slice(20))
    expect(result).deep.eq(getFinalOutput())
  })
})

function getMockContent(): string[] {
  return [
    '/// user model comment above',
    'model User {',
    '///comment above props',
    'id String @id @default(auto()) ///comment after attributes',
    'name String',
    'age Int',
    'role Role',
    'blance Decimal',
    'points Float',
    '/// raw image bytes',
    'avatar Bytes',
    '}',
    '',
    'model Post {',
    'id String @id @default(auto())',
    'viewCount BigInt @default(0)',
    'published Boolean',
    'photos Photo[]',
    'createdAt DateTime @default(now())',
    'updatedAt DateTime @updatedAt',
    'summary Json',
    'richText Unsupported("circle")',
    '}',
    '',
    'enum Role {',
    '/// the admin',
    'Admin @map(name:"ADMIN")',
    'User @map("USER")',
    'GUETS',
    '}',
    '',
    'type Photo {',
    'height Int',
    'width  Int',
    '/// first line comment',
    '/// second line comment',
    'url    String',
    '}',
    '',
  ]
}

function getFinalOutput() {
  return [
    '/**',
    ' * Purified prisma mutation types from [schema](../../../temp/gpure/full/schema.prisma)\\',
    ' * Generated by command ```tealina gpure```\\',
    ' */',
    'export namespace Pure {',
    '\t/** user model comment above */',
    '\texport interface UserCreateInput {',
    '\t\tname: string',
    '\t\tage: number',
    '\t\trole: Role',
    '\t\tblance: number',
    '\t\tpoints: number',
    '\t\t/** raw image bytes */',
    '\t\tavatar: Buffer',
    '\t}',
    '',
    '\t/** user model comment above */',
    '\texport interface UserUpdateInput {',
    '\t\tname?: string',
    '\t\tage?: number',
    '\t\trole?: Role',
    '\t\tblance?: number',
    '\t\tpoints?: number',
    '\t\t/** raw image bytes */',
    '\t\tavatar?: Buffer',
    '\t}',
    '',
    '\texport interface PostCreateInput {',
    '\t\t/** @default {0} */',
    '\t\tviewCount?: bigint',
    '\t\tpublished: boolean',
    '\t\tphotos?: PhotoCreateInput[]',
    '\t\t/** @default {now()} */',
    '\t\tcreatedAt?: Date | string',
    '\t\tupdatedAt?: Date | string',
    '\t\tsummary: JsonValue',
    '\t\trichText: unknow',
    '\t}',
    '',
    '\texport interface PostUpdateInput {',
    '\t\t/** @default {0} */',
    '\t\tviewCount?: bigint',
    '\t\tpublished?: boolean',
    '\t\tphotos?: PhotoUpdateInput[]',
    '\t\t/** @default {now()} */',
    '\t\tcreatedAt?: Date | string',
    '\t\tupdatedAt?: Date | string',
    '\t\tsummary?: JsonValue',
    '\t\trichText?: unknow',
    '\t}',
    '',
    '\texport interface PhotoCreateInput {',
    '\t\theight: number',
    '\t\twidth: number',
    '\t\t/**',
    '\t\t * first line comment',
    '\t\t * second line comment',
    '\t\t */',
    '\t\turl: string',
    '\t}',
    '',
    '\texport interface PhotoUpdateInput {',
    '\t\theight?: number',
    '\t\twidth?: number',
    '\t\t/**',
    '\t\t * first line comment',
    '\t\t * second line comment',
    '\t\t */',
    '\t\turl?: string',
    '\t}',
    '',
    ...ENUMS_BEGIN,
    '',
    '\texport const Role: {',
    '\t\tAdmin: "ADMIN"',
    '\t\tUser: "USER"',
    '\t\tGUETS: "GUETS"',
    '\t}',
    `\texport type Role = (typeof Role)[keyof typeof Role]`,
    '',
    ...JSON_VALUE_TYPE,
    '}',
  ]
}
